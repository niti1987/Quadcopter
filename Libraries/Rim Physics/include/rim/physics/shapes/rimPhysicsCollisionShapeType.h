/*
 *  rimPhysicsRigidObject.h
 *  Rim Physics
 *
 *  Created by Carl Schissler on 11/28/09.
 *  Copyright 2009 Rim Software. All rights reserved.
 *
 */

#ifndef INCLUDE_RIM_PHYSICS_COLLISION_SHAPE_TYPE_H
#define INCLUDE_RIM_PHYSICS_COLLISION_SHAPE_TYPE_H


#include "rimPhysicsShapesConfig.h"


//##########################################################################################
//************************  Start Rim Physics Shapes Namespace  ****************************
RIM_PHYSICS_SHAPES_NAMESPACE_START
//******************************************************************************************
//##########################################################################################




/// Define the integer type to use for a collision shape type hashed identifier.
typedef Hash CollisionShapeTypeID;




//********************************************************************************
//********************************************************************************
//********************************************************************************
/// A class which encapsulates a RTTI-determined type for a CollisionShape.
class CollisionShapeType
{
	public:
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Constructors
			
			
			
			
			/// Create a CollisionShapeType object with the specified internal type.
			RIM_FORCE_INLINE CollisionShapeType( const Type& newType )
				:	type( newType )
			{
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Static Type Creation Methods
			
			
			
			
			/// Return a CollisionShapeType object for the specified ShapeType template parameter.
			template < typename ShapeType >
			RIM_FORCE_INLINE static CollisionShapeType of()
			{
				return CollisionShapeType( Type::of<ShapeType>() );
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Equality Comparison Operators
			
			
			
			
			/// Return whether or not this collision shape type is equal to another.
			RIM_FORCE_INLINE Bool operator == ( const CollisionShapeType& other ) const
			{
				return type == other.type;
			}
			
			
			
			
			/// Return whether or not this collision shape type is not equal to another.
			RIM_FORCE_INLINE Bool operator != ( const CollisionShapeType& other ) const
			{
				return type != other.type;
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Type ID Accessor Methods
			
			
			
			
			/// Return an integer identifying this collision shape type.
			/**
			  * This ID is a 32-bit integer that is generated by hashing the string
			  * generated for a type template parameter. While the posibility of
			  * ID collisions is very low, duplicates are nonetheless a possibility.
			  */
			RIM_FORCE_INLINE CollisionShapeTypeID getID() const
			{
				return type.getHashCode();
			}
			
			
			
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Type String Accessor Methods
			
			
			
			
			/// Get a string representing the implementation-defined name of this type.
			RIM_FORCE_INLINE operator const String& () const
			{
				return type.toString();
			}
			
			
			
			
			/// Get a string representing the implementation-defined name of this type.
			RIM_FORCE_INLINE const String& toString() const
			{
				return type.toString();
			}
			
			
			
			
			/// Get a string representing the implementation-defined name of this type.
			RIM_FORCE_INLINE const String& getName() const
			{
				return type.getName();
			}
			
			
			
			
	public:
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Private Data Members
			
			
			
			
			/// A Type object representing the internal type for this CollisionShapeType.
			Type type;
			
			
			
};




//##########################################################################################
//************************  End Rim Physics Shapes Namespace  ******************************
RIM_PHYSICS_SHAPES_NAMESPACE_END
//******************************************************************************************
//##########################################################################################


#endif // INCLUDE_RIM_PHYSICS_COLLISION_SHAPE_TYPE_H
