/*
 *  rimGraphicsShapeType.h
 *  Rim Graphics
 *
 *  Created by Carl Schissler on 2/27/13.
 *  Copyright 2013 __MyCompanyName__. All rights reserved.
 *
 */

#ifndef INCLUDE_RIM_GRAPHICS_SHAPE_TYPE_H
#define INCLUDE_RIM_GRAPHICS_SHAPE_TYPE_H


#include "rimGraphicsShapesConfig.h"


//##########################################################################################
//***********************  Start Rim Graphics Shapes Namespace  ****************************
RIM_GRAPHICS_SHAPES_NAMESPACE_START
//******************************************************************************************
//##########################################################################################


/// Define the integer type to use for a shape type hashed identifier.
typedef Hash ShapeTypeID;




//********************************************************************************
//********************************************************************************
//********************************************************************************
/// A class which encapsulates a RTTI-determined type for a Shape.
class ShapeType
{
	public:
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Constructors
			
			
			
			
			/// Create a ShapeType object with the specified internal type.
			RIM_FORCE_INLINE ShapeType( const Type& newType )
				:	type( newType.getName() )
			{
			}
			
			
			
			
			/// Create a ShapeType object with the specified string type.
			RIM_FORCE_INLINE ShapeType( const String& newTypeString )
				:	type( newTypeString )
			{
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Static Type Creation Methods
			
			
			
			
			/// Return a ShapeType object for the specified type template parameter.
			template < typename T >
			RIM_FORCE_INLINE static ShapeType of()
			{
				return ShapeType( Type::of<T>() );
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Equality Comparison Operators
			
			
			
			
			/// Return whether or not this shape type is equal to another.
			RIM_FORCE_INLINE Bool operator == ( const ShapeType& other ) const
			{
				return type == other.type;
			}
			
			
			
			
			/// Return whether or not this shape type is not equal to another.
			RIM_FORCE_INLINE Bool operator != ( const ShapeType& other ) const
			{
				return type != other.type;
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Type ID Accessor Methods
			
			
			
			
			/// Return an integer identifying this shape type.
			/**
			  * This ID is a 32-bit integer that is generated by hashing the string
			  * generated for a type template parameter. While the posibility of
			  * ID collisions is very low, duplicates are nonetheless a possibility.
			  */
			RIM_FORCE_INLINE ShapeTypeID getID() const
			{
				return type.getHashCode();
			}
			
			
			
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Type String Accessor Methods
			
			
			
			
			/// Get a string representing the implementation-defined name of this type.
			RIM_FORCE_INLINE operator const String& () const
			{
				return type;
			}
			
			
			
			
			/// Get a string representing the implementation-defined name of this type.
			RIM_FORCE_INLINE const String& toString() const
			{
				return type;
			}
			
			
			
			
			/// Get a string representing the implementation-defined name of this type.
			RIM_FORCE_INLINE const String& getName() const
			{
				return type;
			}
			
			
			
			
	public:
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Private Data Members
			
			
			
			
			/// A string object representing the internal type for this ShapeType.
			String type;
			
			
			
};




//##########################################################################################
//***********************  End Rim Graphics Shapes Namespace  ******************************
RIM_GRAPHICS_SHAPES_NAMESPACE_END
//******************************************************************************************
//##########################################################################################


#endif // INCLUDE_RIM_GRAPHICS_SHAPE_TYPE_H
