/*
 *  rimPhysicsRigidObject.h
 *  Rim Physics
 *
 *  Created by Carl Schissler on 11/28/09.
 *  Copyright 2009 Rim Software. All rights reserved.
 *
 */

#ifndef INCLUDE_RIM_PHYSICS_COLLISION_SHAPE_H
#define INCLUDE_RIM_PHYSICS_COLLISION_SHAPE_H


#include "rimPhysicsShapesConfig.h"


#include "rimPhysicsCollisionShapeType.h"
#include "rimPhysicsCollisionShapeMaterial.h"


//##########################################################################################
//************************  Start Rim Physics Shapes Namespace  ****************************
RIM_PHYSICS_SHAPES_NAMESPACE_START
//******************************************************************************************
//##########################################################################################


class CollisionShapeInstance;




//********************************************************************************
//********************************************************************************
//********************************************************************************
/// A class which represents an abstract shape in 3D space with various physical attributes.
class CollisionShape
{
	public:
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Destructor
			
			
			
			
			/// Destroy this collision shape and all resources it has.
			virtual ~CollisionShape()
			{
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Material Accessor Methods
			
			
			
			
			/// Return a const reference to the material of this collision shape.
			RIM_FORCE_INLINE const CollisionShapeMaterial& getMaterial() const
			{
				return material;
			}
			
			
			
			
			/// Return a reference to the material of this collision shape.
			RIM_FORCE_INLINE CollisionShapeMaterial& getMaterial()
			{
				return material;
			}
			
			
			
			
			/// Set the material of this collision shape to be the specified material.
			RIM_INLINE void setMaterial( const CollisionShapeMaterial& newMaterial )
			{
				material = newMaterial;
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Mass and Volume Accessor Methods
			
			
			
			
			/// Return the mass in mass units (kg) of this CollisionShape as determined by its volume and density.
			RIM_FORCE_INLINE Real getMass() const
			{
				return this->getVolume()*material.getDensity();
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Mass Distribution Accessor Methods
			
			
			
			
			/// Return a 3x3 matrix for the inertia tensor of this shape relative to its center of mass.
			virtual Matrix3 getInertiaTensor() const = 0;
			
			
			
			
			/// Return a 3D vector representing the center-of-mass of this shape in its coordinate frame.
			virtual Vector3 getCenterOfMass() const = 0;
			
			
			
			
			/// Return the volume of this shape in length units cubed (m^3) in its coordinate frame.
			virtual Real getVolume() const = 0;
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Bounding Sphere Accessor Methods
			
			
			
			
			/// Return a const reference to the bounding sphere of this collision shape in its coordinate frame.
			RIM_FORCE_INLINE const BoundingSphere& getBoundingSphere() const
			{
				return boundingSphere;
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Shape Type Accessor Methods
			
			
			
			
			/// Return an integer identifying the sub type of this collision shape.
			/**
			  * This ID is a 32-bit integer that is generated by hashing the string
			  * generated for the SubType template parameter. While the posibility of
			  * ID collisions is very low, duplicates are nonetheless a possibility.
			  */
			RIM_FORCE_INLINE CollisionShapeTypeID getTypeID() const
			{
				return type->getID();
			}
			
			
			
			
			/// Return an object representing the type of this CollisionShape.
			RIM_FORCE_INLINE const CollisionShapeType& getType() const
			{
				return *type;
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Instance Creation Methods
			
			
			
			
			/// Create and return an instance of this shape.
			virtual Pointer<CollisionShapeInstance> getInstance() const = 0;
			
			
			
			
	protected:
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Protected Constructor
			
			
			
			
			/// Create a CollisionShape object which has the specified subtype.
			RIM_FORCE_INLINE CollisionShape( const CollisionShapeType* newType )
				:	type( newType )
			{
				RIM_DEBUG_ASSERT_MESSAGE( type != NULL, "Cannot have NULL type for collision shape." );
			}
			
			
			
			
			/// Create a CollisionShape object which has the specified subtype and material.
			RIM_FORCE_INLINE CollisionShape( const CollisionShapeType* newType,
											const CollisionShapeMaterial& newMaterial )
				:	type( newType ),
					material( newMaterial )
			{
				RIM_DEBUG_ASSERT_MESSAGE( type != NULL, "Cannot have NULL type for collision shape." );
			}
			
			
			
			
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Protected Accessor Methods
			
			
			
			
			/// Set the bounding sphere to use for this CollisionShape.
			/**
			  * This method should be called by a subclass of the CollisionShape
			  * class in order to assure that the shape has the proper bounding sphere.
			  * If this attribute is not properly set, collision detection will fail.
			  *
			  * The radius of the sphere is clamped to the range of [0,+infinity] for safety.
			  */
			RIM_INLINE void setBoundingSphere( const BoundingSphere& newBoundingSphere )
			{
				boundingSphere.position = newBoundingSphere.position;
				boundingSphere.radius = math::max( newBoundingSphere.radius, Real(0) );
			}
			
			
			
			
	private:
		
		//********************************************************************************
		//********************************************************************************
		//********************************************************************************
		//******	Private Data Members
			
			
			
			
			/// A 3D bounding sphere for this shape in its coordinate frame.
			BoundingSphere boundingSphere;
			
			
			
			
			/// An object representing the material that this CollisionShape has.
			CollisionShapeMaterial material;
			
			
			
			
			/// A CollisionShapeType object representing the subtype of this collision shape.
			const CollisionShapeType* type;
			
			
			
};




//##########################################################################################
//************************  End Rim Physics Shapes Namespace  ******************************
RIM_PHYSICS_SHAPES_NAMESPACE_END
//******************************************************************************************
//##########################################################################################


#endif // INCLUDE_RIM_PHYSICS_COLLISION_SHAPE_H
